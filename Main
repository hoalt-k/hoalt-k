package com.example.tasktracker;

import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.content.DialogInterface;
import android.os.Bundle;
import android.text.InputType;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.util.ArrayList;
import java.util.Calendar;

public class MainActivity extends AppCompatActivity {

    private FloatingActionButton fabAddTask;
    private ArrayList<Task> tasks;
    private ListView listViewTasks;
    private TaskAdapter taskadapter;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Initialize task list and list view components
        tasks = new ArrayList<>();
        listViewTasks = findViewById(R.id.listViewTasks);
        taskadapter = new TaskAdapter(this, tasks);
        listViewTasks.setAdapter(taskadapter);

        // Floating action button to add tasks
        fabAddTask = findViewById(R.id.fab_add_task);
        fabAddTask.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showAddTaskDialog(); // Show dialog to add a new task
            }
        });

        // Set long click listener for deleting tasks
        listViewTasks.setOnItemLongClickListener((parent, view, position, id) -> {
            new AlertDialog.Builder(MainActivity.this)
                    .setTitle("Delete Task")
                    .setMessage("Do you really want to delete this task?")
                    .setPositiveButton("Yes", (dialog, which) -> {
                        tasks.remove(position); // Remove task from the list
                        taskadapter.notifyDataSetChanged(); // Refresh the ListView
                    })
                    .setNegativeButton("No", null)
                    .show();
            return true;
        });
    }

    // Method to show dialog for adding new tasks
    private void showAddTaskDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Add a New Task");

        // Layout to contain EditText and a Button
        LinearLayout layout = new LinearLayout(this);
        layout.setOrientation(LinearLayout.VERTICAL);

        final EditText input = new EditText(this);
        input.setInputType(InputType.TYPE_CLASS_TEXT);
        input.setHint("Task name");
        layout.addView(input);

        final Button dateButton = new Button(this);
        dateButton.setText("Set Due Date (Optional)");
        layout.addView(dateButton);

        builder.setView(layout);

        // Set up the button to open DatePickerDialog
        dateButton.setOnClickListener(v -> {
            if (!input.getText().toString().isEmpty()) {
                showDatePickerDialog(new Task(input.getText().toString()));
            } else {
                Toast.makeText(MainActivity.this, "Please enter a task name first.", Toast.LENGTH_SHORT).show();
            }
        });

        builder.setPositiveButton("Add", (dialog, which) -> {
            String taskName = input.getText().toString();
            if (!taskName.isEmpty()) {
                tasks.add(new Task(taskName)); // Add the task without due date initially
                taskadapter.notifyDataSetChanged();
            }
        });

        builder.setNegativeButton("Cancel", null);
        builder.show();
    }

    // Method to display the DatePickerDialog for selecting a due date
    private void showDatePickerDialog(Task task) {
        Calendar c = Calendar.getInstance();
        DatePickerDialog datePickerDialog = new DatePickerDialog(
                this,
                (view, year, monthOfYear, dayOfMonth) -> {
                    String dueDate = dayOfMonth + "/" + (monthOfYear + 1) + "/" + year;
                    task.setDueDate(dueDate);
                    tasks.add(task); // Add task with due date
                    taskadapter.notifyDataSetChanged();
                }, c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH));

        datePickerDialog.show();
    }
}
